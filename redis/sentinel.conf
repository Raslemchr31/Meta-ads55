# Meta Ads Intelligence Platform - Redis Sentinel Configuration
# High Availability and Automatic Failover Configuration

# =======================
# BASIC CONFIGURATION
# =======================

# Sentinel runs on port 26379 by default
port 26379

# Sentinel data directory
dir /var/lib/redis

# =======================
# MASTER MONITORING
# =======================

# Monitor the master named "meta-ads-master"
# IP: redis-master, Port: 6379, Quorum: 2 (majority of 3 sentinels)
sentinel monitor meta-ads-master redis-master 6379 2

# Authentication for the master
sentinel auth-pass meta-ads-master MetaAds2024!SecureRedis#Production$

# =======================
# FAILOVER CONFIGURATION
# =======================

# How long (in milliseconds) a master or replica must be unreachable
# before considering it subjectively down (S_DOWN)
sentinel down-after-milliseconds meta-ads-master 30000

# How long after failover initiation the master should wait before
# starting the failover procedure
sentinel failover-timeout meta-ads-master 180000

# Maximum number of replicas that can be reconfigured simultaneously
# during failover (0 means unlimited)
sentinel parallel-syncs meta-ads-master 1

# =======================
# SENTINEL SECURITY
# =======================

# Sentinel authentication (protect sentinel itself)
requirepass SentinelSecure2024!Guard#

# =======================
# LOGGING
# =======================

# Log level
loglevel notice

# Log file location
logfile /var/log/redis/sentinel.log

# Enable syslog
syslog-enabled yes
syslog-ident redis-sentinel-meta-ads
syslog-facility local0

# =======================
# CLIENT CONFIGURATION
# =======================

# TCP listen backlog
tcp-backlog 511

# Client timeout (0 = no timeout)
timeout 0

# TCP keepalive
tcp-keepalive 60

# =======================
# ADVANCED CONFIGURATION
# =======================

# Sentinel deny scripts reconfig
sentinel deny-scripts-reconfig yes

# Resolve hostnames (useful for Docker/Kubernetes)
sentinel resolve-hostnames yes

# Announce hostnames instead of IPs
sentinel announce-hostnames yes

# =======================
# NOTIFICATION SCRIPTS
# =======================

# Script to execute when master changes
sentinel notification-script meta-ads-master /etc/redis/scripts/notify-master-change.sh

# Script to execute when a replica comes back online
sentinel client-reconfig-script meta-ads-master /etc/redis/scripts/reconfig-clients.sh

# =======================
# SENTINEL CLUSTER CONFIGURATION
# =======================

# Sentinel ID (auto-generated if not specified)
# sentinel myid <unique-id>

# Sentinel known-sentinel configurations (auto-populated)
# These are automatically managed by Sentinel

# =======================
# PERFORMANCE TUNING
# =======================

# Master link down time threshold
sentinel master-reboot-down-after-period meta-ads-master 0

# Period in milliseconds to send INFO to master and replicas
sentinel info-refresh-period meta-ads-master 10000

# =======================
# TLS CONFIGURATION (if using TLS)
# =======================

# TLS port for Sentinel (if needed)
# tls-port 26380
# tls-cert-file /etc/redis/tls/sentinel.crt
# tls-key-file /etc/redis/tls/sentinel.key
# tls-ca-cert-file /etc/redis/tls/ca.crt

# =======================
# CUSTOM CONFIGURATIONS
# =======================

# Announce IP and port (important for Docker networking)
# These will be set via environment variables in Docker Compose
# sentinel announce-ip <ip>
# sentinel announce-port <port>

# =======================
# MONITORING AND ALERTING
# =======================

# Enable command logging for monitoring
# These commands will be logged for security and monitoring
protected-mode yes

# =======================
# REPLICA CONFIGURATIONS
# =======================

# Additional replica configurations can be added here
# sentinel monitor <replica-name> <ip> <port> <quorum>
# sentinel auth-pass <replica-name> <password>
# sentinel down-after-milliseconds <replica-name> <milliseconds>

# =======================
# DATABASE SWITCHING
# =======================

# When Sentinel promotes a replica to master, it will automatically
# handle the database switching for all databases (0-5)

# =======================
# COMMENTS AND NOTES
# =======================

# Sentinel automatically:
# 1. Monitors master and replica health
# 2. Promotes replica to master during failover
# 3. Reconfigures clients to point to new master
# 4. Updates replica configurations
# 5. Provides master discovery for clients

# For Meta Ads Intelligence Platform:
# - DB 0: Sessions will automatically failover
# - DB 1: User preferences will maintain consistency
# - DB 2: Cache will be rebuilt after failover
# - DB 3: Rate limiting will continue with new master
# - DB 4: Job queues will redirect to new master
# - DB 5: Analytics data will remain available

# Client applications should connect through Sentinel
# to automatically handle master discovery and failover